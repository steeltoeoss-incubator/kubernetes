trigger:
  branches:
    include:
    - master
  paths:
    exclude:
    - README.md
pr:
- master

variables:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
strategy:
  matrix:
    Linux_Build_and_Test:
      imageName: ubuntu-latest
    MacOS_Build_and_Test:
      imageName: macOS-latest
    Windows_Build_Test_and_Package:
      imageName: windows-latest
pool:
  vmImage: $(imageName)

steps:
- task: DotNetCoreCLI@2
  displayName: dotnet restore
  inputs:
    command: restore
    verbosityRestore: normal
- task: DotNetCoreCLI@2
  displayName: dotnet build
  inputs:
    command: build
    arguments: '--no-restore -c $(buildConfiguration) -v n' # /p:TreatWarningsAsErrors=True
- task: DotNetCoreCLI@2
  displayName: dotnet test
  inputs:
    command: test
    arguments: '--no-build -c $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Exclude="[*.Test*]*"'
- pwsh: dotnet tool install -g dotnet-reportgenerator-globaltool; reportgenerator "-reports:**\*.opencover.xml" "-targetdir:$(Build.SourcesDirectory)\CodeCoverage" -reporttypes:Cobertura
  displayName: Create Code coverage report
  condition: eq( variables['Agent.OS'], 'Windows_NT' )
- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage'
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(Build.SourcesDirectory)\CodeCoverage\Cobertura.xml'
    reportDirectory: '$(Build.SourcesDirectory)\CodeCoverage'
  condition: eq( variables['Agent.OS'], 'Windows_NT' )
- bash: bash <(curl -s https://codecov.io/bash)
  displayName: 'Upload to codecov.io'
  condition: eq( variables['Agent.OS'], 'Windows_NT' )
